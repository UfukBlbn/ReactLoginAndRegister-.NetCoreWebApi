{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "JETLINK API SERVICES",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "email": "contact@example.com",
      "url": "http://example.com/contact"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://avatars.githubusercontent.com/u/22540479?v=4"
    },
    "description": "This is a sample server Jetlink server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Jetlink sample](http://Jetlink.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Jetlink sample](http://Jetlink.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nJetlink offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications\n<SecurityDefinitions />\n"
  },
  "externalDocs": {
    "description": "Find out how to create a GitHub repo for your OpenAPI definition.",
    "url": "https://github.com/Rebilly/generator-openapi-repo"
  },
  "tags": [
    {
      "name": "Echo",
      "description": "Example echo operations."
    },
    {
      "name": "User",
      "description": "Operations about users."
    },
    {
      "name": "Tag",
      "description": "This is a tag description."
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "paths": {
    "/users/{username}": {
      "parameters": [
        {
          "name": "pretty_print",
          "in": "query",
          "description": "Pretty print response",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "Some description of the operation. test\nYou can use `markdown` here.\n",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_email",
            "in": "query",
            "description": "Filter users without email",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "read:users"
            ]
          },
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "user1",
                  "email": "user@example.com"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "write:users"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      }
    },
    "/echo": {
      "post": {
        "tags": [
          "Echo"
        ],
        "summary": "Echo test",
        "description": "Receive the exact message you've sent",
        "operationId": "echo",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "Hello world!"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            }
          },
          "description": "Echo payload",
          "required": true
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "source": "API.v1.Echo echo = new API.v1.Echo();\necho.message = \"Hello World!\");\nEchoResponse response = echo.post();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Success\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$form = new APIEntitiesEcho();\n$form->setMessage(\"Hello World!\");\ntry {\n    $pet = $client->echo()->post($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      }
    },
    "/pathItem": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Operation summary",
        "description": "Operation description **markdown**.\n",
        "operationId": "operationId",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "Calls per hour allowed by the user.",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          },
          "description": "requestBody description",
          "required": true
        }
      }
    },
    "/pathItemWithExamples": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Operation summary with examples",
        "description": "Operation description **markdown**.\n",
        "operationId": "postPathItemWithExamples",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              },
              "examples": {
                "mapName": {
                  "summary": "My first example",
                  "description": "My first example's description.",
                  "value": {
                    "stringProperty": "tada"
                  }
                },
                "mapNameDoesNotShowInDocsUnlessSummaryIsNotProvided": {
                  "value": {
                    "stringProperty": "checkmark"
                  }
                }
              }
            }
          },
          "description": "requestBody description",
          "required": true
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "Schema": {
        "type": "object",
        "title": "Scalars",
        "properties": {
          "stringProperty": {
            "description": "Property name's description (type is string)1111",
            "type": "string",
            "example": "example"
          },
          "readOnlyStringProperty": {
            "description": "Notice this only appears in the response.",
            "type": "string",
            "readOnly": true,
            "example": "example"
          },
          "writeOnlyStringProperty": {
            "description": "Notice this only appears in the request.",
            "type": "string",
            "writeOnly": true,
            "example": "example"
          },
          "minLengthString": {
            "description": "Property name's description (type is string)",
            "type": "string",
            "minLength": 4,
            "example": "example"
          },
          "maxLengthString": {
            "description": "Property name's description (type is string)",
            "type": "string",
            "maxLength": 140,
            "example": "example"
          },
          "minAndMaxLengthString": {
            "description": "Property name's description (type is string)",
            "type": "string",
            "minLength": 4,
            "maxLength": 140,
            "example": "example"
          },
          "stringEnumValues": {
            "description": "Property name's description (type is string)",
            "type": "string",
            "enum": [
              "sample",
              "example",
              "specimen",
              "case",
              "instance",
              "illustration"
            ]
          },
          "stringDateTime": {
            "description": "Property name's description (type is string, format is date-time)",
            "type": "string",
            "format": "date-time"
          },
          "stringDate": {
            "description": "Property name's description (type is string, format is date-time)",
            "type": "string",
            "format": "date"
          },
          "stringEmail": {
            "description": "Property name's description (type is string, format is email)",
            "type": "string",
            "format": "email"
          },
          "stringIpAddressV4": {
            "description": "Property name's description (type is string, format is ipv4 address)",
            "type": "string",
            "format": "ipv4"
          },
          "stringIpAddressV6": {
            "description": "Property name's description (type is string, format is ipv6 address)",
            "type": "string",
            "format": "ipv6"
          },
          "stringPassword": {
            "description": "Property name's description (type is string, format is password)",
            "type": "string",
            "format": "password"
          },
          "stringHostname": {
            "description": "Property name's description (type is string, format is hostname)",
            "type": "string",
            "format": "hostname"
          },
          "stringUri": {
            "description": "Property name's description (type is string, format is uri)",
            "type": "string",
            "format": "uri"
          },
          "stringUuid": {
            "description": "Property name's description (type is string, format is uuid)",
            "type": "string",
            "format": "uuid"
          },
          "numberProperty": {
            "description": "Property name's description (type is number)",
            "type": "number",
            "example": 8
          },
          "numberFloat": {
            "description": "Property name's description (type is number, format is float)",
            "type": "number",
            "format": "float"
          },
          "numberDouble": {
            "description": "Property name's description (type is number, format is double)",
            "type": "number",
            "format": "double"
          },
          "numberGreaterThanOrEquals": {
            "description": "Property name's description (type is number)",
            "type": "number",
            "minimum": 5
          },
          "numberGreaterThan": {
            "description": "Property name's description (type is number)",
            "type": "number"
          },
          "numberLessThan": {
            "description": "Property name's description (type is number)",
            "type": "number"
          },
          "numberLessThanOrEquals": {
            "description": "Property name's description (type is number)",
            "type": "number",
            "maximum": 8
          },
          "numberRange": {
            "description": "Property name's description (type is number)",
            "type": "number",
            "minimum": 5,
            "maximum": 8
          },
          "numberRangeExclusiveMaximum": {
            "description": "Property name's description (type is number)",
            "type": "number"
          },
          "numberRangeExclusiveMinimumAndMaximum": {
            "description": "Property name's description (type is number)",
            "type": "number"
          },
          "numberMultipleOf": {
            "description": "Property name's description (type is number)",
            "type": "number",
            "multipleOf": 2
          },
          "integerType": {
            "description": "Property name's description (type is integer)",
            "type": "integer"
          },
          "integer32bit": {
            "description": "Property name's description (type is integer, format is int32)",
            "type": "integer",
            "format": "int32"
          },
          "integer64bit": {
            "description": "Property name's description (type is integer, format is int64)",
            "type": "integer",
            "format": "int64"
          },
          "booleanProperty": {
            "description": "Property name's description (type is boolean)",
            "type": "boolean"
          }
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}